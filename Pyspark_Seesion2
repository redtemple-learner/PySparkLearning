{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMh1aIESPEo1jlxORXwuJOa",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/redtemple-learner/PySparkLearning/blob/main/Pyspark_Seesion2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bq33CMkjjGfv",
        "outputId": "e1ae0723-ea1d-44a2-e486-f92d220b61b7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pyspark in /usr/local/lib/python3.10/dist-packages (3.5.3)\n",
            "Requirement already satisfied: py4j==0.10.9.7 in /usr/local/lib/python3.10/dist-packages (from pyspark) (0.10.9.7)\n",
            "+--------------+----------+-----------+------+---+----------------+--------+--------------+------------+\n",
            "|Transaction ID|      Date|Customer ID|Gender|Age|Product Category|Quantity|Price per Unit|Total Amount|\n",
            "+--------------+----------+-----------+------+---+----------------+--------+--------------+------------+\n",
            "|             1|11/24/2023|    CUST001|  Male| 34|          Beauty|       3|            50|         150|\n",
            "|             2| 2/27/2023|    CUST002|Female| 26|        Clothing|       2|           500|        1000|\n",
            "+--------------+----------+-----------+------+---+----------------+--------+--------------+------------+\n",
            "only showing top 2 rows\n",
            "\n",
            "Most sold Product Category\n",
            "+----------------+--------------+\n",
            "|Product Category|Total Quantity|\n",
            "+----------------+--------------+\n",
            "|        Clothing|           894|\n",
            "+----------------+--------------+\n",
            "\n",
            "Highest Money Earner Product\n",
            "+----------------+--------------------+\n",
            "|Product Category|Product Total Amount|\n",
            "+----------------+--------------------+\n",
            "|     Electronics|              156905|\n",
            "+----------------+--------------------+\n",
            "\n",
            "Most Valued Customer\n",
            "+-----------+------------+\n",
            "|Customer ID|Total Amount|\n",
            "+-----------+------------+\n",
            "|    CUST412|        2000|\n",
            "|    CUST257|        2000|\n",
            "|    CUST093|        2000|\n",
            "|    CUST072|        2000|\n",
            "|    CUST743|        2000|\n",
            "|    CUST269|        2000|\n",
            "|    CUST476|        2000|\n",
            "|    CUST946|        2000|\n",
            "|    CUST487|        2000|\n",
            "|    CUST577|        2000|\n",
            "+-----------+------------+\n",
            "only showing top 10 rows\n",
            "\n",
            "Find Which Gender buys which product Category the most\n",
            "+------+----------------+--------------+\n",
            "|Gender|Product Category|Total Quantity|\n",
            "+------+----------------+--------------+\n",
            "|  Male|        Clothing|           453|\n",
            "|  Male|     Electronics|           410|\n",
            "|  Male|          Beauty|           353|\n",
            "|Female|        Clothing|           441|\n",
            "|Female|     Electronics|           439|\n",
            "|Female|          Beauty|           418|\n",
            "+------+----------------+--------------+\n",
            "\n",
            "Total Amount by Age Category\n",
            "+------------+----------------+-------------------+\n",
            "|Age_Category|Product Category|Age Category Amount|\n",
            "+------------+----------------+-------------------+\n",
            "|       60-79|     Electronics|              24065|\n",
            "|       60-79|        Clothing|              15130|\n",
            "|       60-79|          Beauty|               5620|\n",
            "|       50-59|     Electronics|              37935|\n",
            "|       50-59|        Clothing|              31940|\n",
            "|       50-59|          Beauty|              28465|\n",
            "|       40-49|     Electronics|              26700|\n",
            "|       40-49|        Clothing|              32020|\n",
            "|       40-49|          Beauty|              34645|\n",
            "|       30-39|     Electronics|              32600|\n",
            "|       30-39|        Clothing|              30340|\n",
            "|       30-39|          Beauty|              33385|\n",
            "|       20-29|     Electronics|              25660|\n",
            "|       20-29|        Clothing|              39335|\n",
            "|       20-29|          Beauty|              32075|\n",
            "|       10-19|     Electronics|               9945|\n",
            "|       10-19|        Clothing|               6815|\n",
            "|       10-19|          Beauty|               9325|\n",
            "+------------+----------------+-------------------+\n",
            "\n"
          ]
        }
      ],
      "source": [
        "!pip install pyspark\n",
        "\n",
        "from pyspark.sql import SparkSession\n",
        "#from pyspark.sql.functions import col # Import col function\n",
        "#from pyspark.sql.functions import when # Import when function\n",
        "from pyspark.sql.functions import * # All the functions\n",
        "\n",
        "\n",
        "# Create a SparkSession\n",
        "spark = SparkSession.builder.appName(\"RSDImport\").getOrCreate()\n",
        "\n",
        "# Replace 'your_data.csv' with the actual path to your CSV file\n",
        "df = spark.read.csv(\"/content/sample_data/Retail_Sales_Data.csv\", header=True, inferSchema=True)\n",
        "\n",
        "df.show(2)\n",
        "\n",
        "# Calculating Most sold Product Category\n",
        "\n",
        "print(\"Most sold Product Category\")\n",
        "\n",
        "Sales_by_Category_df = df.groupBy(\"Product Category\").agg(sum(\"Quantity\").alias(\"Total Quantity\"))\n",
        "\n",
        "Sales_by_Category_df.orderBy(\"Total Quantity\",ascending = False).limit(1).show()\n",
        "\n",
        "# Calculating Highest Money Earner Product\n",
        "\n",
        "print(\"Highest Money Earner Product\")\n",
        "\n",
        "Revenue_By_Category_df = df.groupBy(\"Product Category\").agg(sum(\"Total Amount\").alias(\"Product Total Amount\"))\n",
        "\n",
        "Revenue_By_Category_df.orderBy(\"Product Total Amount\",ascending = False).limit(1).show()\n",
        "\n",
        "# Most Valued Customer\n",
        "\n",
        "print(\"Most Valued Customer\")\n",
        "\n",
        "Most_valued_Customer_df = df.groupBy(\"Customer ID\").agg(sum(\"Total Amount\").alias(\"Total Amount\"))\n",
        "\n",
        "Most_valued_Customer_df.orderBy(\"Total Amount\",ascending = False).show(10)\n",
        "\n",
        "# Find Which Gender buys which product Category the most\n",
        "\n",
        "print(\"Find Which Gender buys which product Category the most\")\n",
        "\n",
        "Gender_Category_df = df.groupBy(\"Gender\",\"Product Category\").agg(sum(\"Quantity\").alias(\"Total Quantity\"))\n",
        "\n",
        "Gender_Category_df.orderBy(\"Gender\",\"Total Quantity\",ascending = False).show()\n",
        "\n",
        "# Create a chart of Age Category vs Sales\n",
        "\n",
        "print(\"Total sales Amount by Age Category\")\n",
        "\n",
        "df = df.withColumn(\"Age_Category\",\n",
        "              when(df[\"Age\"] < 10,\"1-9\").\n",
        "              when((df[\"Age\"] >= 10) & (df[\"Age\"] < 20),\"10-19\").\n",
        "              when((df[\"Age\"] >= 20) & (df[\"Age\"] < 30),\"20-29\").\n",
        "              when((df[\"Age\"] >= 30) & (df[\"Age\"] < 40),\"30-39\").\n",
        "              when((df[\"Age\"] >= 40) & (df[\"Age\"] < 50),\"40-49\").\n",
        "              when((df[\"Age\"] >= 50) & (df[\"Age\"] < 60),\"50-59\").\n",
        "              when((df[\"Age\"] >= 60) & (df[\"Age\"] < 70),\"60-79\").\n",
        "              when(df[\"Age\"] >= 70, \"70-79\").\n",
        "              otherwise(\"Unknown\"))\n",
        "\n",
        "Age_Category_df = df.groupBy(\"Age_Category\",\"Product Category\").agg(sum(\"Total Amount\").alias(\"Age Category Amount\"))\n",
        "\n",
        "Age_Category_df.orderBy(\"Age_Category\",\"Product Category\",ascending = False).show()\n",
        "\n",
        "spark.stop()\n",
        "\n",
        "\n",
        "\n"
      ]
    }
  ]
}